import {APP_INITIALIZER, NgModule} from '@angular/core';import {BrowserModule} from '@angular/platform-browser';import {AppRoutingModule} from './app-routing.module';import {AppComponent} from './app.component';import {HomeComponent} from './home/home/home.component';import {  AuthInterceptor,  AuthModule,  LogLevel,  LoginResponse,  OidcSecurityService,  OpenIdConfigLoader,  StsConfigHttpLoader,  StsConfigLoader} from 'angular-auth-oidc-client';import {HTTP_INTERCEPTORS, HttpClient} from '@angular/common/http';import {Observable, map} from 'rxjs';import {ForbiddenComponent} from './forbidden/forbidden/forbidden.component';export function getConfig(http: HttpClient): Observable<any> {  return http.get<any>(`assets/config/config.json`);}export const httpLoaderFactory = (httpClient: HttpClient) => {  const config$ = getConfig(httpClient).pipe(    map((customConfig: any) => {      return {        authority: customConfig.authority,        redirectUrl: `${window.location.origin}/n3tk/core`,        postLogoutRedirectUri: `${window.location.origin}/n3tk/core`,        clientId: customConfig.clientId,        scope: 'openid offline_access n3tk email profile',        responseType: 'code',        silentRenew: true,        ignoreNonceAfterRefresh: true,        useRefreshToken: true,        renewTimeBeforeTokenExpiresInSeconds: 30,        logLevel: LogLevel.Debug,        secureRoutes: ['/n3tk/core/products']      };    })  );  return new StsConfigHttpLoader(config$);};function initAuth(oidcSecurityService: OidcSecurityService) {  return () =>    new Promise<LoginResponse>(resolve => {      setTimeout(() => {        oidcSecurityService.checkAuth().subscribe(data => {          resolve(data);        });      });    });}@NgModule({  declarations: [AppComponent, HomeComponent, ForbiddenComponent],  imports: [    BrowserModule,    AppRoutingModule,    AuthModule.forRoot({      loader: {        provide: StsConfigLoader,        useFactory: httpLoaderFactory,        deps: [HttpClient]      }    })  ],  providers: [    OpenIdConfigLoader,    {provide: APP_INITIALIZER, useFactory: initAuth, deps: [OidcSecurityService], multi: true},    {provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true}  ],  bootstrap: [AppComponent]})export class AppModule {}